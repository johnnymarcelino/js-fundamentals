db.pokemon.find({},
{name: 1, attack: 1
}).skip(200)

{
    "_id": 201,
    "name": "Sudowoodo",
    "attack": 100
}                                                                   
{
    "_id": 202,
    "name": "Politoed",
    "attack": 75
}                                                                     
{
    "_id": 203,
    "name": "Hoppip",
    "attack": 75
}                                                                       
{
    "_id": 204,
    "name": "Skiploom",
    "attack": 75
}                                                                     
{
    "_id": 206,
    "name": "Aipom",
    "attack": 75
}                                                                        
{
    "_id": 205,
    "name": "Jumpluff",
    "attack": 75
}                                                                     
{
    "_id": 217,
    "name": "Unown",
    "attack": 75
}                                                                        
{
    "_id": 215,
    "name": "Slowking",
    "attack": 75
}                                                                     
{
    "_id": 216,
    "name": "Misdreavus",
    "attack": 75
}                                                                  
{
    "_id": 211,
    "name": "Quagsire",
    "attack": 85
}                                                                     
{
    "_id": 214,
    "name": "Murkrow",
    "attack": 85
}                                                                      
{
    "_id": 207,
    "name": "Sunkern",
    "attack": 75
}                                                                      
{
    "_id": 208,
    "name": "Sunflora",
    "attack": 75
}                                                                     
{
    "_id": 218,
    "name": "Wobbuffet",
    "attack": 75
}                                                                    
{
    "_id": 219,
    "name": "Girafarig",
    "attack": 80
}
{
    "_id": 222,
    "name": "Dunsparce",
    "attack": 75
}
{
    "_id": 223,
    "name": "Gligar",
    "attack": 75
}
{
    "_id": 212,
    "name": "Espeon",
    "attack": 75
}                                                     
{
    "_id": 243,
    "name": "comeca com a letra o",
    "attack": 105
}
{
    "_id": 244,
    "name": "Delibird",
    "attack": 75
}

// solução para o problema de buscas

// auxilio de tabelas
// Tabala: Attack
attack -> localização (ou id)  // aponta para a localização 
75 -> 202
...
85 -> 211
85 -> 214
...

// Tabela: Name
name -> localização
Aipon -> 206
Espero -> 212
...
Umbreon -> 213
...

// realizar a busca binaria: divide na metade o tabela ordenada por x/y/z e realiza a logica

db.pokemon.find(
    {name: "Umbreon"}
).explain()  // explicação do modo realizado a busca

// utilizando o _id -> busca muito mais eficiente

db.pokemon.find(
    {_id: 240}
).explain("executionStats")  // explicação completa do modo realizado a busca e informações de tempo
// caso surgir duvidas sobre o porquê e busca está tão lenta, com o executionStats

// utilizando createindex e getindexes

db.pokemon.getIndexes()  // obtem todos os indexes disponiveis

// criar novo index
db.pokemon.createIndex({name: 1})

// alterar o nome do index
db.pokemon.createIndex({name: 1}, {name: "meu_index"}) // apesar de o mongo criar, geralmente devs mantêm

// filtrar nas buscas de forma mais eficaz
db.pokemon.find({attack: {$gte: 85}}).explain("executionStats") 


// explain -> executionStats - Regex

{
    "queryPlanner": {
        "plannerVersion": 1,
        "namespace": "pokemon_center.pokemon",
        "indexFilterSet": false,
        "parsedQuery": {
            "name": {
                "$regex": "^R"
            }
        },
        "winningPlan": {
            "stage": "FETCH",
            "inputStage": {
                "stage": "IXSCAN",
                "keyPattern": {
                    "name": 1
                },
                "indexName": "name_1",
                "isMultiKey": false,
                "multiKeyPaths": {
                    "name": []
                },
                "isUnique": false,
                "isSparse": false,
                "isPartial": false,
                "indexVersion": 2,
                "direction": "forward",
                "indexBounds": {
                    "name": [
                        "[\"R\", \"S\")",
                        "[/^R/, /^R/]"
                    ]
                }
            }
        },
        "rejectedPlans": []
    },
    "executionStats": {
        "executionSuccess": true,
        "nReturned": 25,
        "executionTimeMillis": 0,
        "totalKeysExamined": 26,
        "totalDocsExamined": 25,
        "executionStages": {
            "stage": "FETCH",
            "nReturned": 25,
            "executionTimeMillisEstimate": 0,
            "works": 27,
            "advanced": 25,
            "needTime": 1,
            "needYield": 0,
            "saveState": 0,
            "restoreState": 0,
            "isEOF": 1,
            "docsExamined": 25,
            "alreadyHasObj": 0,
            "inputStage": {
                "stage": "IXSCAN",
                "nReturned": 25,
                "executionTimeMillisEstimate": 0,
                "works": 27,
                "advanced": 25,
                "needTime": 1,
                "needYield": 0,
                "saveState": 0,
                "restoreState": 0,
                "isEOF": 1,
                "keyPattern": {
                    "name": 1
                },
                "indexName": "name_1",
                "isMultiKey": false,
                "multiKeyPaths": {
                    "name": []
                },
                "isUnique": false,
                "isSparse": false,
                "isPartial": false,
                "indexVersion": 2,
                "direction": "forward",
                "indexBounds": {
                    "name": [
                        "[\"R\", \"S\")",
                        "[/^R/, /^R/]"
                    ]
                },
                "keysExamined": 26,
                "seeks": 2,
                "dupsTested": 0,
                "dupsDropped": 0
            }
        }
    },
    "serverInfo": {
        "host": "DESKTOP-O4TMJU5",
        "port": 27017,
        "version": "4.4.18",
        "gitVersion": "8ed32b5c2c68ebe7f8ae2ebe8d23f36037a17dea"
    },
    "ok": 1
}

// buscando queries com regex

db.pokemon.find( {name: /^R/, attack: {$gte: 70}}).explain("executionStats")

// compound indexes - indexes com mais de um field

db.pokemon.createIndex({name: 1, attack: 1})  // duplo

db.pokemon.createIndex({attack: 1, name: 1})  // duplo

// utilizando com hint
// força utilizar o index passado, como dica para trabalhar com o desejado

db.pokemon.find( 
    {name: /^R/, 
    attack: {$gte: 100}
    })
    .hint({name: 1, 
    attack: 1})
    .explain("executionStats")


// deletando indexes com dropIndex("nome")

db.pokemon.dropIndex("name_1_attack_1")

// compondo indexes com elegancia

db.pokemon.createIndex( 
{
    attack: 1, defense: -1},
     {name: "fortes_pouca_defesa"} )

db.pokemon.find({attack: {$gte: 85}, defense: {$lte: 50} }).count() 

db.pokemon.find({attack: {$gte: 85}, 
    defense: {$lte: 50} })
    .hint({attack: 1, defense: 1})
    .explain("executionStats") 

// não há necessidades de ter dois indexes com o mesmo primeiro campo de querie iguais, poois mongodb faz as buscas através do mais simples e primeiro campo é analisado

// exemplo
db.pokemon.createIndex( {attack: 1, defense: -1}, {name: "fortes_pouca_defesa"} ) // primeiro campo com attack
db.pokemon.createIndex( {attack: 1, defense: 1}, {name: "fortes_pouca_defesa_2"} ) // primeiro campo com attack

// utilizando com Multikey indexes

db.pokemon.find({types: "Fighting"}).explain("executionStats")  // mesma coisa para criação de index em array

// utilizando funções

// função dominó
function domino() {
    for (let x = 0; x <= 6; x++) {
      for (let y = 0; y <= x; y++) {
        db.domino.insert({
          piece: [x, y
                ],
            });
        }
    }
}

// invoca a função depois de criada
domino()

// encontra a chave desejada com array e sem _id
db.domino.find({piece: [6,6]}, {_id: 0}) 

db.domino.find({piece: 2})  // todas as peças que tem o 2
db.domino.find({piece: {$all: [4, 5]}})  // a peça que tem o 4 e 5 ou 5 e 4, todos esses elementos

