- buscando por valores especificos por faixas

db.pokemon.find({
    defense: {
        $gt: 60,
        $lt: 72,
    },
    { _id: 0, name: 1, defense: 1
    }
});

- combinando operadores logicos

// trabalhando com or

db.pokemon.find({$or: [ // $or: [querie, querie, querie], - exemplo
        {defense: {$gt: 60, $lt: 72
            }
        },
        {defense: 100
        }
    ]
},
{ _id: 0, name: 1, defense: 1
});


// ou defesa acima de 80 ou hp > 80

db.pokemon.find( {$or: [
        {defense: {$gte: 80,
            },
        },
        {attack: {$gte: 80
            }
        },
    ],
},
{_id: 0, attack: 1, name: 1, defense: 1
});


- Exemplos:
// "hp" > 80 E "defense" > 80
// OU
// "attack" > 80 E "speed" > 80
// if((hp >= 80 && defense >= 80) || (attack >= 80 && speed >= 80))

db.pokemon.find({
    $or: [
        {defense: {
            $gte: 80,
            },
        hp: {
            gte: 80,
            },
        },
        {
            attack: {
                $gte: 80,
            },
            speed: {
                $gte: 80,
            },
        },
    ]
})


// trabalhando com E em todos os setores
// falha na requisição da query
// db.pokemon.find({
//     $or: [
//         {
//             defense: {
//                 $gte: 80,
//                 hp: {
//                     gte: 80,
//                 },
//             },
//         },
//         {
//             attack: {
//                 $gte: 80,
//                 speed: {
//                     $gte: 80,
//                 },
//             },
//         },
//     ]
// })
// trabalhando com ordenação - crescente = 1 ; descrescente = -1
// - crescente/ascendente

db.pokemon.find({     $or: [
        {defense: {             $gte: 80,
            },         hp: {             gte: 80,
            },
        },
        {             attack: {                 $gte: 80,
            },             speed: {                 $gte: 80,
            },
        },
    ]
}).pretty().sort({hp: 1
}).count()

// - decrescente/descendente

db.pokemon.find({     $or: [
        {defense: {             $gte: 80,
            },         hp: {             gte: 80,
            },
        },
        {             attack: {                 $gte: 80,
            },             speed: {                 $gte: 80,
            },
        },
    ]
}).pretty().sort({hp: -1
}).count()

// ordem nos filtros do sort faz toda a diferença no "desempate"
// trabalhando com tamanho de "Sizes" nos arrays de apresentação

db.pokemon.find({types: {$size: 2
    }
},
{_id: 0, name: 1, types: 1
})

db.pokemon.find({types: {$all: [
            "Poison",
            "Rock"
        ]
    }
},
{_id: 0, name: 1, attack: 1
})

// ou

db.pokemon.find({types: {$all: [
            "Fire",
            "Rock"
        ]
    }
},
{_id: 0, name: 1, attack: 1
})

// não fundiona pois a query tem somente 2
// db.pokemon.find({types: {$in: ["Fire", "Rock"]}}, {_id: 0, name: 1, attack: 1})
// utilizndo mais de uma query com o mesmo resultado

db.pokemon.find(
    {
        $and: [
        {types: "Flying"
        },
        {types: "Bug"
        }
    ]
},
{_id: 0, name: 1, types: 1
})

// query with: lengendary

db.pokemon.find(
    {
        $and: [
        {types: "Flying"
        },
        {legendary: true
        }
    ]
},
{_id: 0, name: 1, types: 1, legendary: 1
})

// - a mesma query, porem sintaxe diferente
// operador logico já está implicitamente declarado

db.pokemon.find({
        types: "Flying",
        legendary: true
},
{_id: 0, name: 1, types: 1, legendary: 1
})


// dot annotation

db.pokemon.find({
    "battle_points.hp": {lte: 40
    }
}).pretty()
